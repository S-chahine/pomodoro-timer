{"ast":null,"code":"var _jsxFileName = \"/home/sc/pomodoro-clock/pomo-clock-frontend/pomodoro-clock-app/src/components/SessionTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './SessionTimer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionTimer = ({\n  timeLeft,\n  totalTime,\n  isRunning\n}) => {\n  _s();\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n  const dashOffset = useRef(circumference);\n  const startTimeRef = useRef(null);\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [isPaused, setIsPaused] = useState(false);\n  useEffect(() => {\n    let intervalId;\n    if (isRunning && !isPaused) {\n      if (!startTimeRef.current) {\n        startTimeRef.current = Date.now() - elapsedTime * 1000;\n      }\n      intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        const elapsedSeconds = Math.floor((currentTime - startTimeRef.current) / 1000);\n        dashOffset.current = Math.max(circumference - circumference / totalTime * elapsedSeconds, 0);\n        if (elapsedSeconds <= totalTime) {\n          setElapsedTime(elapsedSeconds);\n        }\n      }, 1000);\n    } else {\n      if (isPaused) {\n        // Calculate the remaining dash offset based on the elapsed time when paused\n        dashOffset.current = Math.max(circumference - circumference / totalTime * elapsedTime, 0);\n      } else {\n        dashOffset.current = circumference;\n      }\n      startTimeRef.current = null;\n      setIsPaused(false); // Reset isPaused when not running\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, isPaused, circumference, elapsedTime, totalTime, timeLeft]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"150\",\n    height: \"150\",\n    viewBox: \"0 0 150 150\",\n    className: \"session-timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"75\",\n      cy: \"75\",\n      r: radius,\n      fill: \"transparent\",\n      stroke: \"#007bff\",\n      strokeWidth: \"15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"75\",\n      cy: \"75\",\n      r: radius,\n      fill: \"transparent\",\n      stroke: \"#28a745\",\n      strokeWidth: \"15\",\n      strokeDasharray: circumference,\n      strokeDashoffset: dashOffset.current,\n      className: \"session-timer-progress\",\n      style: {\n        animationPlayState: isRunning ? 'running' : 'paused',\n        animationDuration: `${totalTime - elapsedTime}s`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"75\",\n      y: \"85\",\n      dominantBaseline: \"middle\",\n      textAnchor: \"middle\",\n      fontSize: \"25\",\n      fill: \"#333\",\n      children: [Math.floor(timeLeft / 60).toString().padStart(2, '0'), \":\", (timeLeft % 60).toString().padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(SessionTimer, \"5g4abUhTh49FB6coQydn88EjyHY=\");\n_c = SessionTimer;\nexport default SessionTimer;\nvar _c;\n$RefreshReg$(_c, \"SessionTimer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","SessionTimer","timeLeft","totalTime","isRunning","_s","radius","circumference","Math","PI","dashOffset","startTimeRef","elapsedTime","setElapsedTime","isPaused","setIsPaused","intervalId","current","Date","now","setInterval","currentTime","elapsedSeconds","floor","max","clearInterval","width","height","viewBox","className","children","cx","cy","r","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","strokeDashoffset","style","animationPlayState","animationDuration","x","y","dominantBaseline","textAnchor","fontSize","toString","padStart","_c","$RefreshReg$"],"sources":["/home/sc/pomodoro-clock/pomo-clock-frontend/pomodoro-clock-app/src/components/SessionTimer.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './SessionTimer.css';\n\nconst SessionTimer = ({ timeLeft, totalTime, isRunning }) => {\n    const radius = 70;\n    const circumference = 2 * Math.PI * radius;\n    const dashOffset = useRef(circumference);\n    const startTimeRef = useRef(null);\n    const [elapsedTime, setElapsedTime] = useState(0);\n    const [isPaused, setIsPaused] = useState(false);\n\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning && !isPaused) {\n            if (!startTimeRef.current) {\n                startTimeRef.current = Date.now() - elapsedTime * 1000;\n            }\n\n            intervalId = setInterval(() => {\n                const currentTime = Date.now();\n                const elapsedSeconds = Math.floor((currentTime - startTimeRef.current) / 1000);\n                dashOffset.current = Math.max(circumference - (circumference / totalTime) * elapsedSeconds, 0);\n\n                if (elapsedSeconds <= totalTime) {\n                    setElapsedTime(elapsedSeconds);\n                }\n            }, 1000);\n        } else {\n            if (isPaused) {\n                // Calculate the remaining dash offset based on the elapsed time when paused\n                dashOffset.current = Math.max(circumference - (circumference / totalTime) * elapsedTime, 0);\n            } else {\n                dashOffset.current = circumference;\n            }\n            startTimeRef.current = null;\n            setIsPaused(false); // Reset isPaused when not running\n        }\n\n        return () => clearInterval(intervalId);\n    }, [isRunning, isPaused, circumference, elapsedTime, totalTime, timeLeft]);\n\n    return (\n        <svg width=\"150\" height=\"150\" viewBox=\"0 0 150 150\" className=\"session-timer\">\n            <circle cx=\"75\" cy=\"75\" r={radius} fill=\"transparent\" stroke=\"#007bff\" strokeWidth=\"15\" />\n            <circle\n                cx=\"75\"\n                cy=\"75\"\n                r={radius}\n                fill=\"transparent\"\n                stroke=\"#28a745\"\n                strokeWidth=\"15\"\n                strokeDasharray={circumference}\n                strokeDashoffset={dashOffset.current}\n                className=\"session-timer-progress\"\n                style={{ animationPlayState: isRunning ? 'running' : 'paused', animationDuration: `${totalTime - elapsedTime}s` }}\n            />\n            <text x=\"75\" y=\"85\" dominantBaseline=\"middle\" textAnchor=\"middle\" fontSize=\"25\" fill=\"#333\">\n                {Math.floor(timeLeft / 60).toString().padStart(2, '0')}:{(timeLeft % 60).toString().padStart(2, '0')}\n            </text>\n        </svg>\n    );\n};\n\nexport default SessionTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}