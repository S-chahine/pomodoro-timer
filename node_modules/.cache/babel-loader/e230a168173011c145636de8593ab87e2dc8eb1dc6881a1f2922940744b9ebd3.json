{"ast":null,"code":"var _jsxFileName = \"/home/sc/pomodoro-clock/pomo-clock-frontend/pomodoro-clock-app/src/components/SessionTimer.js\",\n  _s = $RefreshSig$();\n// SessionTimer.js\n\n// Import necessary React hooks and styles\nimport React, { useEffect, useRef, useState } from 'react';\nimport './SessionTimer.css';\n\n// Functional component SessionTimer taking props as arguments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionTimer = ({\n  timeLeft,\n  totalTime,\n  isRunning\n}) => {\n  _s();\n  // Constants for the radius and circumference of the timer circle\n  const radius = 70;\n  const circumference = 2 * Math.PI * radius;\n\n  // useRef for maintaining the current dash offset value\n  const dashOffset = useRef(circumference);\n\n  // useRef for maintaining the start time of the timer\n  const startTimeRef = useRef(null);\n\n  // State variable for maintaining the elapsed time\n  const [elapsedTime, setElapsedTime] = useState(0);\n\n  // useEffect hook to manage the timer logic\n  useEffect(() => {\n    let intervalId;\n    if (isRunning) {\n      const initialStartTime = Date.now() - elapsedTime * 1000;\n      const remainingTime = totalTime - elapsedTime;\n      intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        const elapsedSeconds = Math.floor((currentTime - initialStartTime) / 1000);\n\n        // Update elapsed time when the animation is in progress\n        if (elapsedSeconds <= totalTime) {\n          setElapsedTime(elapsedSeconds);\n          dashOffset.current = circumference - circumference * elapsedSeconds / totalTime;\n        }\n      }, 1000);\n    } else {\n      // Reset dashOffset when not running\n      dashOffset.current = circumference;\n    }\n    return () => clearInterval(intervalId);\n  }, [isRunning, totalTime, circumference, elapsedTime]);\n\n  // Return JSX for rendering the timer as an SVG\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"150\",\n    height: \"150\",\n    viewBox: \"0 0 150 150\",\n    className: \"session-timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"75\",\n      cy: \"75\",\n      r: radius,\n      fill: \"transparent\",\n      stroke: \"#007bff\",\n      strokeWidth: \"15\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n      cx: \"75\",\n      cy: \"75\",\n      r: radius,\n      fill: \"transparent\",\n      stroke: \"#28a745\",\n      strokeWidth: \"15\",\n      strokeDasharray: circumference,\n      strokeDashoffset: dashOffset.current,\n      className: \"session-timer-progress\",\n      style: {\n        animationPlayState: isRunning ? 'running' : 'paused',\n        animationDuration: `${totalTime - elapsedTime}s`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"75\",\n      y: \"85\",\n      dominantBaseline: \"middle\",\n      textAnchor: \"middle\",\n      fontSize: \"25\",\n      fill: \"#333\",\n      children: [Math.floor(timeLeft / 60).toString().padStart(2, '0'), \":\", (timeLeft % 60).toString().padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n// Export the SessionTimer component\n_s(SessionTimer, \"Dbki/ItKqsAyL7HD/pbLJBIEL8I=\");\n_c = SessionTimer;\nexport default SessionTimer;\nvar _c;\n$RefreshReg$(_c, \"SessionTimer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","SessionTimer","timeLeft","totalTime","isRunning","_s","radius","circumference","Math","PI","dashOffset","startTimeRef","elapsedTime","setElapsedTime","intervalId","initialStartTime","Date","now","remainingTime","setInterval","currentTime","elapsedSeconds","floor","current","clearInterval","width","height","viewBox","className","children","cx","cy","r","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","strokeDashoffset","style","animationPlayState","animationDuration","x","y","dominantBaseline","textAnchor","fontSize","toString","padStart","_c","$RefreshReg$"],"sources":["/home/sc/pomodoro-clock/pomo-clock-frontend/pomodoro-clock-app/src/components/SessionTimer.js"],"sourcesContent":["// SessionTimer.js\n\n// Import necessary React hooks and styles\nimport React, { useEffect, useRef, useState } from 'react';\nimport './SessionTimer.css';\n\n// Functional component SessionTimer taking props as arguments\nconst SessionTimer = ({ timeLeft, totalTime, isRunning }) => {\n    // Constants for the radius and circumference of the timer circle\n    const radius = 70;\n    const circumference = 2 * Math.PI * radius;\n\n    // useRef for maintaining the current dash offset value\n    const dashOffset = useRef(circumference);\n\n    // useRef for maintaining the start time of the timer\n    const startTimeRef = useRef(null);\n\n    // State variable for maintaining the elapsed time\n    const [elapsedTime, setElapsedTime] = useState(0);\n\n    // useEffect hook to manage the timer logic\n    useEffect(() => {\n        let intervalId;\n\n        if (isRunning) {\n            const initialStartTime = Date.now() - elapsedTime * 1000;\n            const remainingTime = totalTime - elapsedTime;\n\n            intervalId = setInterval(() => {\n                const currentTime = Date.now();\n                const elapsedSeconds = Math.floor((currentTime - initialStartTime) / 1000);\n\n                // Update elapsed time when the animation is in progress\n                if (elapsedSeconds <= totalTime) {\n                    setElapsedTime(elapsedSeconds);\n                    dashOffset.current = circumference - (circumference * elapsedSeconds) / totalTime;\n                }\n            }, 1000);\n        } else {\n            // Reset dashOffset when not running\n            dashOffset.current = circumference;\n        }\n\n        return () => clearInterval(intervalId);\n    }, [isRunning, totalTime, circumference, elapsedTime]);\n\n    // Return JSX for rendering the timer as an SVG\n    return (\n        <svg width=\"150\" height=\"150\" viewBox=\"0 0 150 150\" className=\"session-timer\">\n            {/* Outer circle representing the entire timer */}\n            <circle cx=\"75\" cy=\"75\" r={radius} fill=\"transparent\" stroke=\"#007bff\" strokeWidth=\"15\" />\n\n            {/* Inner circle representing the progress of the timer */}\n            <circle\n                cx=\"75\"\n                cy=\"75\"\n                r={radius}\n                fill=\"transparent\"\n                stroke=\"#28a745\"\n                strokeWidth=\"15\"\n                strokeDasharray={circumference}\n                strokeDashoffset={dashOffset.current}\n                className=\"session-timer-progress\"\n                style={{ animationPlayState: isRunning ? 'running' : 'paused', animationDuration: `${totalTime - elapsedTime}s` }}\n            />\n\n            {/* Text displaying the time remaining in the center of the timer */}\n            <text x=\"75\" y=\"85\" dominantBaseline=\"middle\" textAnchor=\"middle\" fontSize=\"25\" fill=\"#333\">\n                {Math.floor(timeLeft / 60).toString().padStart(2, '0')}:\n                {(timeLeft % 60).toString().padStart(2, '0')}\n            </text>\n        </svg>\n    );\n};\n\n// Export the SessionTimer component\nexport default SessionTimer;\n"],"mappings":";;AAAA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,oBAAoB;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACzD;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,aAAa,GAAG,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAGH,MAAM;;EAE1C;EACA,MAAMI,UAAU,GAAGb,MAAM,CAACU,aAAa,CAAC;;EAExC;EACA,MAAMI,YAAY,GAAGd,MAAM,CAAC,IAAI,CAAC;;EAEjC;EACA,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACAF,SAAS,CAAC,MAAM;IACZ,IAAIkB,UAAU;IAEd,IAAIV,SAAS,EAAE;MACX,MAAMW,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGL,WAAW,GAAG,IAAI;MACxD,MAAMM,aAAa,GAAGf,SAAS,GAAGS,WAAW;MAE7CE,UAAU,GAAGK,WAAW,CAAC,MAAM;QAC3B,MAAMC,WAAW,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC;QAC9B,MAAMI,cAAc,GAAGb,IAAI,CAACc,KAAK,CAAC,CAACF,WAAW,GAAGL,gBAAgB,IAAI,IAAI,CAAC;;QAE1E;QACA,IAAIM,cAAc,IAAIlB,SAAS,EAAE;UAC7BU,cAAc,CAACQ,cAAc,CAAC;UAC9BX,UAAU,CAACa,OAAO,GAAGhB,aAAa,GAAIA,aAAa,GAAGc,cAAc,GAAIlB,SAAS;QACrF;MACJ,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,MAAM;MACH;MACAO,UAAU,CAACa,OAAO,GAAGhB,aAAa;IACtC;IAEA,OAAO,MAAMiB,aAAa,CAACV,UAAU,CAAC;EAC1C,CAAC,EAAE,CAACV,SAAS,EAAED,SAAS,EAAEI,aAAa,EAAEK,WAAW,CAAC,CAAC;;EAEtD;EACA,oBACIZ,OAAA;IAAKyB,KAAK,EAAC,KAAK;IAACC,MAAM,EAAC,KAAK;IAACC,OAAO,EAAC,aAAa;IAACC,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAEzE7B,OAAA;MAAQ8B,EAAE,EAAC,IAAI;MAACC,EAAE,EAAC,IAAI;MAACC,CAAC,EAAE1B,MAAO;MAAC2B,IAAI,EAAC,aAAa;MAACC,MAAM,EAAC,SAAS;MAACC,WAAW,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAG1FvC,OAAA;MACI8B,EAAE,EAAC,IAAI;MACPC,EAAE,EAAC,IAAI;MACPC,CAAC,EAAE1B,MAAO;MACV2B,IAAI,EAAC,aAAa;MAClBC,MAAM,EAAC,SAAS;MAChBC,WAAW,EAAC,IAAI;MAChBK,eAAe,EAAEjC,aAAc;MAC/BkC,gBAAgB,EAAE/B,UAAU,CAACa,OAAQ;MACrCK,SAAS,EAAC,wBAAwB;MAClCc,KAAK,EAAE;QAAEC,kBAAkB,EAAEvC,SAAS,GAAG,SAAS,GAAG,QAAQ;QAAEwC,iBAAiB,EAAG,GAAEzC,SAAS,GAAGS,WAAY;MAAG;IAAE;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrH,CAAC,eAGFvC,OAAA;MAAM6C,CAAC,EAAC,IAAI;MAACC,CAAC,EAAC,IAAI;MAACC,gBAAgB,EAAC,QAAQ;MAACC,UAAU,EAAC,QAAQ;MAACC,QAAQ,EAAC,IAAI;MAAChB,IAAI,EAAC,MAAM;MAAAJ,QAAA,GACtFrB,IAAI,CAACc,KAAK,CAACpB,QAAQ,GAAG,EAAE,CAAC,CAACgD,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,GACvD,EAAC,CAACjD,QAAQ,GAAG,EAAE,EAAEgD,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAAA;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;;AAED;AAAAlC,EAAA,CArEMJ,YAAY;AAAAmD,EAAA,GAAZnD,YAAY;AAsElB,eAAeA,YAAY;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}